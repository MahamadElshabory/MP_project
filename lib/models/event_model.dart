// lib/models/event_model.dart

class EventModel {
  /// The key generated by Firebase Realtime Database
  final String firebaseKey;

  /// Local SQLite primary key (optional, for your local cache)
  final int? id;

  final String title;
  final String description;

  /// When this event occurs
  final DateTime dateTime;

  /// e.g. "meeting", "deadline", "study_group"
  final String category;

  /// Whether the current user has RSVPâ€™d
  final bool isRSVP;

  /// If the organizer has canceled this event
  final bool isCanceled;

  EventModel({
    required this.firebaseKey,
    this.id,
    required this.title,
    required this.description,
    required this.dateTime,
    required this.category,
    this.isRSVP = false,
    this.isCanceled = false,
  });

  /// Create an EventModel from a Firebase snapshot
  factory EventModel.fromFirebase(String key, Map<String, dynamic> m) {
    return EventModel(
      firebaseKey: key,
      title: m['title'] as String? ?? '',
      description: m['description'] as String? ?? '',
      dateTime: DateTime.parse(m['dateTime'] as String),
      category: m['category'] as String? ?? '',
      isRSVP: (m['isRSVP'] as int? ?? 0) == 1,
      isCanceled: (m['isCanceled'] as int? ?? 0) == 1,
    );
  }

  /// Convert to a Map for pushing back to Firebase
  Map<String, dynamic> toFirebase() => {
    'title': title,
    'description': description,
    'dateTime': dateTime.toIso8601String(),
    'category': category,
    'isRSVP': isRSVP ? 1 : 0,
    'isCanceled': isCanceled ? 1 : 0,
  };

  /// Create from a local SQLite row
  factory EventModel.fromMap(Map<String, dynamic> map) {
    return EventModel(
      firebaseKey: map['firebaseKey'] as String,
      id: map['id'] as int?,
      title: map['title'] as String,
      description: map['description'] as String,
      dateTime: DateTime.parse(map['dateTime'] as String),
      category: map['category'] as String,
      isRSVP: (map['isRSVP'] as int? ?? 0) == 1,
      isCanceled: (map['isCanceled'] as int? ?? 0) == 1,
    );
  }

  /// Convert to a Map for storing locally
  Map<String, dynamic> toMap() {
    final m = <String, dynamic>{
      'firebaseKey': firebaseKey,
      'title': title,
      'description': description,
      'dateTime': dateTime.toIso8601String(),
      'category': category,
      'isRSVP': isRSVP ? 1 : 0,
      'isCanceled': isCanceled ? 1 : 0,
    };
    if (id != null) m['id'] = id;
    return m;
  }

  EventModel copyWith({
    String? firebaseKey,
    int? id,
    String? title,
    String? description,
    DateTime? dateTime,
    String? category,
    bool? isRSVP,
    bool? isCanceled,
  }) {
    return EventModel(
      firebaseKey: firebaseKey ?? this.firebaseKey,
      id: id ?? this.id,
      title: title ?? this.title,
      description: description ?? this.description,
      dateTime: dateTime ?? this.dateTime,
      category: category ?? this.category,
      isRSVP: isRSVP ?? this.isRSVP,
      isCanceled: isCanceled ?? this.isCanceled,
    );
  }
}
